{"version":3,"sources":["App.tsx","service.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","tableData","setTableData","isLoading","setIsLoading","isModalVisible","setModalVisible","currentEditingInfo","setCurrentEditingInfo","Form","useForm","form","isCreating","setIsCreating","resetForm","fetchData","a","axios","get","data","list","Message","success","error","content","useEffect","columns","title","dataIndex","render","salary","Number","toLocaleString","_","record","id","employee_name","Button","type","onClick","Popconfirm","onOk","info","onCancel","status","PageHeader","className","subTitle","size","Table","noDataElement","style","marginLeft","loading","pagination","pageSize","Modal","unmountOnExit","visible","validate","values","JSON","stringify","autoFocus","focusLock","initialValues","Item","label","field","required","Input","placeholder","InputNumber","min","max","prefix","formatter","value","replace","parser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10773c84.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Button,\n  Form,\n  Input,\n  InputNumber,\n  Message,\n  Modal,\n  PageHeader,\n  Popconfirm,\n  Table,\n} from '@arco-design/web-react';\nimport '@arco-design/web-react/dist/css/arco.css';\nimport './App.css';\nimport { getEmployeeList, EmployeeInfo } from './service';\n\nfunction App() {\n  const [tableData, setTableData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isModalVisible, setModalVisible] = useState(false);\n  const [currentEditingInfo, setCurrentEditingInfo] = useState<EmployeeInfo>(\n    {}\n  );\n  const [form] = Form.useForm();\n  const [isCreating, setIsCreating] = useState(true);\n\n  const resetForm = () => {\n    setIsCreating(true);\n    setCurrentEditingInfo({});\n    setModalVisible(false);\n  };\n\n  const fetchData = async () => {\n    setIsLoading(true);\n    try {\n      const { data } = await getEmployeeList();\n      const { data: list } = data;\n      setTableData(list);\n      Message.success('列表拉取成功！');\n    } catch (error) {\n      Message.error({ content: '雇员列表获取失败，请重试' });\n    }\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n    },\n    {\n      title: '姓名',\n      dataIndex: 'employee_name',\n    },\n    {\n      title: '年龄',\n      dataIndex: 'employee_age',\n    },\n    {\n      title: '工资',\n      dataIndex: 'employee_salary',\n      render: (salary: number) => Number(salary).toLocaleString(),\n    },\n    {\n      title: '操作',\n      render: (_: any, record: any) => {\n        const { id, employee_name } = record;\n\n        return (\n          <>\n            <Button\n              type=\"text\"\n              onClick={() => {\n                setCurrentEditingInfo(record);\n                setModalVisible(true);\n                setIsCreating(false);\n              }}\n            >\n              编辑\n            </Button>\n            <Popconfirm\n              title=\"确定要删除这条记录吗？\"\n              onOk={async () => {\n                Message.info({ content: `成功删除雇员 ${employee_name}` });\n                fetchData();\n              }}\n              onCancel={() => {\n                Message.error({ content: '没有删除成功，请重试' });\n              }}\n            >\n              <Button type=\"text\" status=\"danger\">\n                删除\n              </Button>\n            </Popconfirm>\n          </>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div id=\"container\">\n      <PageHeader\n        className=\"header\"\n        title=\"雇员管理系统\"\n        subTitle=\"雇员管理系统可以清晰的看到在职的雇员信息\"\n      />\n      <div id=\"content\">\n        <div id=\"tableContainer\">\n          <div id=\"toolbar\">\n            <Button\n              type=\"primary\"\n              size=\"small\"\n              onClick={() => {\n                setModalVisible(true);\n              }}\n            >\n              \b录入雇员信息\n            </Button>\n          </div>\n          <Table\n            noDataElement={\n              <p>\n                数据获取失败  \n                <Button style={{marginLeft: 10}} type=\"primary\" onClick={() => fetchData()}>重新获取</Button>\n              </p>\n            }\n            loading={isLoading}\n            columns={columns}\n            data={tableData}\n            pagination={{ pageSize: 15 }}\n          />\n        </div>\n      </div>\n      <Modal\n        unmountOnExit\n        title=\"雇员信息\"\n        visible={isModalVisible}\n        onOk={async () => {\n          try {\n            const values = await form.validate();\n\n            // 录入新信息\n            if (isCreating) {\n              Message.success(`雇员信息录入成功, ${JSON.stringify(values)}`);\n            } else {\n              Message.success(\n                `雇员信息更新成功, ${currentEditingInfo.id}, ${JSON.stringify(\n                  values\n                )}`\n              );\n            }\n            resetForm();\n            fetchData();\n          } catch (error) {\n            Message.error('表单提交失败， 请重试！');\n          }\n        }}\n        onCancel={() => {\n          resetForm();\n        }}\n        autoFocus={false}\n        focusLock={true}\n      >\n        <Form form={form} initialValues={currentEditingInfo}>\n          <Form.Item label=\"姓名\" field=\"employee_name\" required>\n            <Input placeholder=\"请填写雇员姓名\" />\n          </Form.Item>\n          <Form.Item label=\"年龄\" field=\"employee_age\" required>\n            <InputNumber placeholder=\"请输入雇员年龄\" min={18} max={100} />\n          </Form.Item>\n          <Form.Item label=\"工资\" field=\"employee_salary\" required>\n            <InputNumber\n              prefix=\"¥\"\n              placeholder=\"请录入雇员工资\"\n              min={0}\n              formatter={(value) =>\n                `${value}`.replace(/B(?=(d{3})+(?!d))/g, ',')\n              }\n              parser={(value) => value.replace(/,/g, '')}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\n\nexport interface EmployeeInfo {\n  id?: string;\n  employee_name?: string;\n  employee_salary?: string;\n  employee_age?: string;\n}\n\nexport function getEmployeeList() {\n  return axios.get('https://dummy.restapiexample.com/api/v1/employees');\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}